图片的基础模型  ARGB
A   alpha   透明度
R   red     红色
B   blue    蓝色
G   green   绿色

通过调整以上4个值的大小,可以更改图片的显示效果.

一 颜色矩阵 

色相/色调 -- 物体传递的颜色
饱和度    -- 颜色的纯度   是否发灰的程度,0 是灰色程度最高的-变成黑白 100%是单一颜色高亮,
亮度/明度 -- 颜色的相对明暗的程度  同样的颜色在不同光亮下给人的感觉不同,描述的图片泛白的情况. 全黑或者全白了.

android 下  colorMatrix 颜色矩阵
val matrix=ColorMatrix() 
matrix.setRotate()     设置  rgb
matrix.setSaturation() 设置  饱和度
matrix.setScale() 设置  亮度

matrix.postConcat()    可以将多个colormatrix 的对象合并成一个.多次调用,进行叠加,最终变成一个
      

颜色矩阵: 4行 5列   共20个数值
使用数组进行初始化.  0  6 12  18 为 1(能被6整除) 其余为0;该矩阵不改变rgba的指,主要用于初始化矩阵.

每一行代表一个属性    从上到下  r g  b  a
最后一列是偏移量,能从侧面调整像素的显示效果
改变矩阵中的数据的值,可以改变图片的显示效果

1 从文件中读取指定的图片. 此图片无法被修改
2 使用bitmapfactory生成新的图片.
3 新建canvas 和paint
4 对paint 设置颜色矩阵,paint.setcolorfileter()
5 在canvas上重新画出图片

二 像素点

某个像素点的底片算法: 
a.r=255-a.当前显示的r的值
a.g=255-a.当前显示的g的值
a.b=255-a.当前显示的b的值

老照片效果/怀旧效果
    
 int newR=(int) (0.393*oldR+0.769*oldG+0.189*oldB);
 int newG=(int) (0.349*oldR+0.686*oldG+0.168*oldB);
 int newB=(int) (0.272*oldR+0.534*oldG+0.131*oldB);






